#!/bin/bash

#
#       Copyright (c) 2004-2006 Daniel Robert Bradley. All rights reserved.
#
#
#	Bos::build utils
#
#	Usage: bos_build_utils <output_file>
#

main()
{
	printf "bos_build_utils: "
	find_base_dir
	check_args $@ &&

#	echo "Retrieving packages from $RESOURCE_URL"
	build_utils
#	echo done
}
	
build_utils()
{
	run_scripts
	if [ $? -eq 0 ]
	then
		printf " done\n"
	else
		printf " error\n"
		return -1
	fi
}

run_scripts()
{

	download()
	{
		local File=$1
		local Url=${RESOURCE_URL}/${PKG_DIR}/${File}

		mkdir -p ${SOURCE} &&
		cd ${SOURCE} &&
		if [ ! -f ${File} ]
		then
			${WGET} ${Url}
		fi

	}

	local SCRIPTDIR=$BASE_DIR/lib/tools_script

	source $SCRIPTDIR/helper/smake.sh              >> $LOG 2>&1 &&
	printf "#" &&
	source $SCRIPTDIR/helper/cdrtools.sh           >> $LOG 2>&1 &&
	printf "#" &&
	source $SCRIPTDIR/helper/squashfs.sh           >> $LOG 2>&1 &&
	printf "#"
}

find_base_dir()
{
	local THIS_DIR=$PWD
	local EXE_DIR=`dirname $0`
	cd $EXE_DIR/..
	BASE_DIR=`pwd`
	cd $THIS_DIR

	set h+
	umask 022
	LFS=/tools
	LC_ALL=POSIX

	PATH=/tools/bin:/bin:/usr/bin:$PATH
	#echo "bos_build_tools: exporting path: $PATH"
	export LFS LC_ALL PATH
}

check_args()
{
	if [ $# -gt 2 ]
	then
		printf "too many parameters\n"
		print_usage
		return $?
	elif [ $# -lt 1 ]
	then
		printf "must specify project file\n"
		print_usage
		return $?
	else
		for arg in $@
		do
			if [ "$arg" == "-f" ]
			then
				FORCE=true
			else
				PROJECT_DIR=`dirname $1`
				PROJECT=$1
				source $PROJECT
                                source $BASE_DIR/etc/bos.conf
                                                                 
				BUILD_BASE=$BUILD
				
				IMAGE=$BUILD/$TOOLS_IMAGE_NAME
				mkdir -p $BUILD/log
				echo "" > $BUILD/log/tools.log
				LOG=$BUILD/log/tools.log
				echo "bos_build_tools: image=$IMAGE" > $LOG
			fi
		done
	fi
}

print_usage()
{
	printf "Usage: bos_create_tools [-f] <image_name>\n"
	return -1
}

main $@

